from __future__ import annotations

from typing import TYPE_CHECKING, Iterable, List, Set, Optional

from backports.cached_property import cached_property
from typing_extensions import Protocol

from .autogenerated_models import *

if TYPE_CHECKING:
    from .api import E621


class Post(Post):
    @cached_property
    def all_tags(self) -> Set[str]:
        return set(
            self.tags.general
            + self.tags.species
            + self.tags.character
            + self.tags.copyright
            + self.tags.artist
            + self.tags.invalid
            + self.tags.lore
            + self.tags.meta
        )


class _HasPostIdsAndE621API(Protocol):
    e621api: "E621"
    post_ids: List[int]


class _PostsGetterMixin:
    @cached_property
    def posts(self: _HasPostIdsAndE621API) -> List[Post]:
        return self.e621api.posts.search(tags=f"id:{','.join(map(str, self.post_ids))}")


class Pool(Pool, _PostsGetterMixin):
    pass


class EnrichedPostSet(PostSet, _PostsGetterMixin):
    pass


class BlackList(Set[str]):
    def intersects(self, iterable: Iterable[str]) -> bool:
        for val in self:
            if " " in val and all(v in iterable for v in val.replace("  ", " ").split(" ")):
                return True
            elif val in iterable:
                return True
        return False

class AuthenticatedUser(User):
    wiki_page_version_count: Optional[int] = None
    artist_version_count: Optional[int] = None
    pool_version_count: Optional[int] = None
    forum_post_count: Optional[int] = None
    comment_count: Optional[int] = None
    flag_count: Optional[int] = None
    positive_feedback_count: Optional[int] = None
    neutral_feedback_count: Optional[int] = None
    negative_feedback_count: Optional[int] = None
    upload_limit: Optional[int] = None
    show_avatars: Optional[bool] = None
    blacklist_avatars: Optional[bool] = None
    blacklist_users: Optional[bool] = None
    description_collapsed_initially: Optional[bool] = None
    hide_comments: Optional[bool] = None
    show_hidden_comments: Optional[bool] = None
    show_post_statistics: Optional[bool] = None
    has_mail: Optional[bool] = None
    receive_email_notifications: Optional[bool] = None
    enable_keyboard_navigation: Optional[bool] = None
    enable_privacy_mode: Optional[bool] = None
    style_usernames: Optional[bool] = None
    enable_auto_complete: Optional[bool] = None
    has_saved_searches: Optional[bool] = None
    disable_cropped_thumbnails: Optional[bool] = None
    disable_mobile_gestures: Optional[bool] = None
    enable_safe_mode: Optional[bool] = None
    disable_responsive_mode: Optional[bool] = None
    disable_post_tooltips: Optional[bool] = None
    no_flagging: Optional[bool] = None
    no_feedback: Optional[bool] = None
    disable_user_dmails: Optional[bool] = None
    enable_compact_uploader: Optional[bool] = None
    replacements_beta: Optional[bool] = None
    updated_at: Optional[str] = None
    email: Optional[str] = None
    last_logged_in_at: Optional[str] = None
    last_forum_read_at: Optional[str] = None
    recent_tags: Optional[str] = None
    comment_threshold: Optional[int] = None
    default_image_size: Optional[str] = None
    favorite_tags: Optional[str] = None
    blacklisted_tags: Optional[str] = None
    time_zone: Optional[str] = None
    per_page: Optional[int] = None
    custom_style: Optional[str] = None
    favorite_count: Optional[int] = None
    api_regen_multiplier: Optional[int] = None
    api_burst_limit: Optional[int] = None
    remaining_api_limit: Optional[int] = None
    statement_timeout: Optional[int] = None
    favorite_limit: Optional[int] = None
    tag_query_limit: Optional[int] = None

    @cached_property
    def blacklist(self) -> BlackList:
        return BlackList((self.blacklisted_tags or "").split("\n"))

    class Config:
        extra = "allow"

    class Config:
        extra = "allow"

    @cached_property
    def blacklist(self) -> BlackList:
        return BlackList(self.blacklisted_tags.split("\n"))
    
from pydantic import BaseModel

class SafeAlternatesOriginal(BaseModel):
    type: Optional[str] = None
    urls: Optional[List[str]] = None

# Monkey-patch the generated class
import e621.autogenerated_models as autogenerated_models
autogenerated_models.AlternatesOriginal = SafeAlternatesOriginal

